{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","users","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestUsers","searchField","onSearchChange","isPending","filterUsers","filter","toLowerCase","includes","connect","searchUsers","requestUsers","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateUsers","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7bcf5ab.chunk.js","sourcesContent":["import React from 'react';\n\n// Card Component displays user card\nconst Card = ({id, name, email}) => {\n    //or const { name, email, id } = props;\n    return (\n        <div className='tc bg-light-blue dib br4 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='users' src={`https://robohash.org/${id}?150x150`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// CardList Component maps array and returns users as cards\nconst CardList = ({ users }) => {\n    return (\n        <div>\n            {\n                users.map((user, i) => {\n                    return (\n                        <Card \n                            key={user.id} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email} \n                            />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n// SearchBox Component receives user input and runs searchChange on event\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n            className='pa3 ba br4 b--navy bg-lightest-blue' \n            type='search' \n            placeholder='search users' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n// Scroll Component creates a scroll overflow for children\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\n// ErrorBoundry Component Catches Errors and returns customized message\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops, something went wrong.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestUsers } from '../actions';\n\n// Redux State to Props object\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchUsers.searchField,\n        users: state.requestUsers.users,\n        isPending: state.requestUsers.isPending,\n        error: state.requestUsers.error\n    };\n}\n\n// Redux Dispatch to Props object\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestUsers: () => dispatch(requestUsers())\n    };\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestUsers();\n    }\n\n    render() {\n\n        const { searchField, onSearchChange, users, isPending } = this.props;\n        const filterUsers = users.filter(user => {\n            return user.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        if (isPending) {\n            return (\n                <h1 className='tc'>Loading</h1>\n            );\n        } else {\n            return (\n                <div className='tc'>\n                    <h1>Galactic Directory</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList users={filterUsers} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_USERS_PENDING,\n    REQUEST_USERS_SUCCESS,\n    REQUEST_USERS_FAILED \n} from './constants';\n\n// Redux Actions\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestUsers = () => dispatch => {\n    dispatch({ type: REQUEST_USERS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_USERS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }));\n};","// Redux Constants\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_USERS_PENDING,\n    REQUEST_USERS_SUCCESS,\n    REQUEST_USERS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nconst initialStateUsers = {\n    isPending: false,\n    users: [],\n    error: ''\n};\n\n// Redux Reducers\nexport const searchUsers = (state = initialStateSearch, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default: \n            return state;\n    }\n};\n\nexport const requestUsers = (state = initialStateUsers, action = {}) => {\n    switch(action.type) {\n        case REQUEST_USERS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n\n        case REQUEST_USERS_SUCCESS:\n            return Object.assign({}, state, { users: action.payload, isPending: false });\n\n        case REQUEST_USERS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchUsers, requestUsers } from './reducers';\n\n// Redux middleware\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchUsers, requestUsers});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}